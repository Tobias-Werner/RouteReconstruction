from utility import *
from postgis import *
from model import *
from shapely import LineString, Point, frechet_distance
import matplotlib.pyplot as plt
from sqlalchemy import func, or_, and_
import matplotlib.lines as mlines

from math import atan2, degrees


def get_custom_route() -> WKTElement:
    return WKTElement(
        "LineString (410390.8601388675160706 5755597.83606969658285379, 410261.07411421230062842 5755653.46366645861417055, 410224.71594565466511995 5755669.85825256910175085, 410189.50121341651538387 5755687.89020977448672056, 410161.25070375256473199 5755703.20515515189617872, 410151.22099124093074352 5755708.63639629539102316, 410104.51573724346235394 5755735.70876001659780741, 410099.95012412971118465 5755738.36073467507958412, 410019.04174077528296039 5755785.32873439695686102, 409985.31242992507759482 5755804.82620901055634022, 409941.3970555099658668 5755829.8140367828309536, 409894.61168500635540113 5755856.13336709886789322, 409825.90215297683607787 5755896.55461168382316828, 409789.22750589437782764 5755917.71971350442618132, 409773.16824152210028842 5755927.28781406953930855, 409698.66155136446468532 5755969.03924399334937334, 409647.15233584062661976 5755995.55753622390329838, 409586.75015397201059386 5756023.36081456951797009, 409512.84821495518554002 5756056.58232299331575632, 409508.2278461204841733 5756058.83534299861639738, 409463.56247742963023484 5756080.5035443976521492, 409424.12298704322893173 5756099.55207804776728153, 409381.66740171832498163 5756117.93246204126626253, 409339.98067741451086476 5756135.09775937162339687, 409325.67763854993972927 5756139.82943978160619736, 409296.88612018030835316 5756148.16152552142739296, 409258.00487262720707804 5756158.13428517151623964, 409242.43483242712682113 5756161.98806659691035748, 409200.19156077696243301 5756171.17680118232965469, 409197.94172254687873647 5756165.39920857083052397, 409137.09559375850949436 5756008.89462334848940372, 409133.37952450977172703 5755998.48226505424827337, 409130.44672771129989997 5755986.90978377778083086, 409127.44742202310590073 5755969.40880844835191965, 409125.86713535391027108 5755936.55159001331776381, 409134.91354529355885461 5755585.37774976063519716, 409135.4554587253369391 5755564.11888342723250389, 409137.81914614501874894 5755472.46040784753859043, 409137.84796854841988534 5755458.1529554920271039, 409136.79059008817421272 5755443.47585909813642502, 409130.82957827602513134 5755403.37791948672384024, 409129.38758038048399612 5755372.07573246955871582, 409131.20812268485315144 5755337.93298164010047913, 409134.44518169888760895 5755314.38900235947221518, 409142.55287186760688201 5755290.22253176849335432, 409162.40943437372334301 5755249.65559723228216171, 409179.53514038235880435 5755213.55502093024551868, 409187.04259552323492244 5755198.72239704802632332, 409196.89596520806662738 5755180.16477549821138382, 409220.39882072631735355 5755146.47398445755243301, 409227.86997365672141314 5755136.44814372155815363, 409233.04689669812796637 5755126.55295196361839771, 409234.71955394261749461 5755110.73604216426610947, 409231.86748899758094922 5755097.56002670247107744, 409227.78962983179371804 5755084.28388320468366146, 409221.65878498123493046 5755073.82628598902374506, 409210.85182106419233605 5755047.44451867882162333, 409184.65769887826172635 5754963.9921074453741312, 409163.74671360210049897 5754843.20807359740138054, 409162.3553913165233098 5754837.40377485938370228, 409159.21331765071954578 5754833.26666560675948858, 409074.2527184333303012 5754797.28531569894403219, 409065.86562873621005565 5754794.38949794415384531, 409057.61702683428302407 5754791.54680173192173243, 409043.36973650194704533 5754787.82305982988327742, 409032.55494763539172709 5754783.78105400130152702, 408968.32849609322147444 5754753.62112404499202967, 408930.70480336988111958 5754733.90247384458780289, 408771.7904711946612224 5754667.51083110459148884, 408763.17285599332535639 5754653.88394557498395443, 408749.17183253541588783 5754604.51004631724208593, 408743.78580575529485941 5754591.99238208308815956, 408737.01948915550019592 5754575.06097085773944855, 408725.45913041877793148 5754556.2033876022323966, 408719.41190891986479983 5754551.17391211912035942, 408711.52114207274280488 5754544.60944022238254547, 408689.0367103421012871 5754503.72325116489082575, 408686.55129451409447938 5754498.29504482820630074, 408682.31189097376773134 5754499.62957398965954781, 408677.89421423600288108 5754499.10946103185415268, 408674.09715180762577802 5754496.7979975501075387, 408671.77505521441344172 5754493.53622097708284855, 408670.84423947031609714 5754489.63716139085590839, 408671.45963584916898981 5754485.67649743985384703, 408673.51493481342913583 5754482.2346784844994545, 408676.75762738072080538 5754479.79469756223261356, 408680.67961669870419428 5754478.77746275439858437, 408684.6985739337396808 5754479.30485691223293543, 408720.92006689694244415 5754356.43405927997082472, 408733.82458764698822051 5754317.7612439664080739, 408740.78581335203489289 5754295.59534357022494078, 408750.93915061699226499 5754266.31789133790880442, 408762.99450680962763727 5754224.42324290703982115, 408769.67802167305490002 5754207.00176781695336103, 408774.46954840567195788 5754194.44311293866485357, 408808.75589360069716349 5754097.21847972832620144, 408810.50179927836870775 5754092.25822246540337801, 408812.90848334156908095 5754085.81740466505289078, 408824.72108471515821293 5754090.55280520115047693, 408835.66675243555800989 5754094.8923999322578311, 408874.697744561068248 5754110.41290975827723742, 408894.34084092371631414 5754118.00963827408850193, 408939.37905977270565927 5754135.99115798249840736, 408948.73631123587256297 5754138.46863414254039526, 408957.76291141303954646 5754139.40575197990983725, 408963.83112151129171252 5754139.52895703259855509, 408969.88921331742312759 5754139.09609725140035152, 408975.03997226903447881 5754138.31262367498129606, 408978.23169376084115356 5754137.58704686909914017, 408982.45227054203860462 5754136.33099877275526524, 408987.58866601722547784 5754134.37966149765998125, 408991.15245768998283893 5754132.93531661108136177, 409001.89864206069614738 5754128.21192132961004972, 409032.2702732885372825 5754114.62095348909497261, 409072.50813379313331097 5754097.44656685926020145, 409122.64175333094317466 5754075.27557919081300497, 409177.35057501564733684 5754052.03191623650491238, 409186.52662094379775226 5754049.45120205916464329, 409221.83558342792093754 5754039.55433516576886177, 409253.99005384929478168 5754030.53819342143833637, 409262.27681214245967567 5754028.21850244142115116, 409285.78689314523944631 5754021.89587438572198153, 409316.31266579340444878 5754010.28414655849337578, 409349.08670452202204615 5753994.44883654359728098, 409440.8273483399534598 5753942.34631290845572948, 409445.97182371484814212 5753940.06155857257544994, 409473.16791207890491933 5753927.97707379888743162, 409487.49088276020484045 5753922.84515640791505575, 409502.58443666371749714 5753918.8674771822988987, 409540.7716514720232226 5753911.35724132414907217, 409568.82967059023212641 5753905.8437535036355257, 409689.85292481229407713 5753883.83295853529125452, 409693.00018387229647487 5753883.29777424223721027, 409768.56933454592945054 5753869.3296887818723917, 409783.25346401263959706 5753865.89425398595631123)")


def plot(track_id):
    with Session(get_engine()) as session:
        fig, all_axes = plt.subplots(nrows=1, ncols=1, figsize=(6, 6))

        the_axes = all_axes

        with Session(get_engine()) as session:
            reference_track, track_length = session.query(
                TrackAnalysis,
                ST_Length(TrackAnalysis.geom).label("track_length")
            ).filter(
                TrackAnalysis.track_id == track_id
            ).one()

            shortest_track, shortest_track_length = session.query(
                RouteP2PResults,
                ST_Length(RouteP2PResults.geom_way).label("track_length")
            ).filter(
                and_(
                    RouteP2PResults.track_id == track_id,
                    RouteP2PResults.type == 'shortest'
                )
            ).one()

            fastest_track, fastest_track_length = session.query(
                RouteP2PResults,
                ST_Length(RouteP2PResults.geom_way).label("track_length")
            ).filter(
                and_(
                    RouteP2PResults.track_id == track_id,
                    RouteP2PResults.type == 'fastest'
                )
            ).one()

            custom_route_geom = get_custom_route()
            custom_track_frechet = frechet_distance(to_shape(custom_route_geom), to_shape(reference_track.geom))

            the_axes.set_title(None)
            plot_linestring(the_axes,
                            custom_route_geom,
                            Colors.turquoise,
                            linestyle='solid',
                            linewidth=3.0,
                            z_order=1,
                            dashes=(2, 3),
                            with_markers=False
                            )

            plot_linestring(the_axes,
                            reference_track.geom,
                            Colors.gradient_red_blue_9[0],
                            linestyle='solid',
                            linewidth=3.0,
                            z_order=1,
                            with_markers=False
                            )
            plot_linestring(the_axes,
                            shortest_track.geom_way,
                            Colors.qualitative_1_blue,
                            linestyle='dotted',
                            linewidth=3.0,
                            z_order=2,
                            with_markers=False,
                            dashes=(2, 3),
                            )
            plot_linestring(the_axes,
                            fastest_track.geom_way,
                            Colors.qualitative_1_lightblue,
                            linestyle='dotted',
                            linewidth=3.0,
                            z_order=3,
                            with_markers=False,
                            dashes=(2, 2)
                            )
            plot_track_start_and_end(
                axes=the_axes,
                geom=reference_track.geom,
                color=Colors.gradient_red_blue_9[0],
                markersize=9
            )

            linestring_coords = to_shape(reference_track.geom).coords
            start_point = Point(linestring_coords[0])
            end_point = Point(linestring_coords[-1])

            direct_line = LineString([start_point, end_point])
            center_point = direct_line.interpolate(0.5, normalized=True)

            xmin = center_point.x - track_length * 0.4
            ymin = center_point.y + track_length * 0.4
            xmax = center_point.x + track_length * 0.4
            ymax = center_point.y - track_length * 0.4

            bbox = Polygon([
                (xmin, ymin),
                (xmax, ymin),
                (xmax, ymax),
                (xmin, ymax),
                (xmin, ymin)
            ])

            for intersected_geom in get_intersected_streets(bbox):
                plot_linestring(the_axes, intersected_geom[0], Colors.light_gray, 1.5, z_order=0, with_markers=False)

            the_axes.xaxis.set_visible(False)
            the_axes.yaxis.set_visible(False)
            the_axes.set_aspect('equal', adjustable='box')
            the_axes.set_ylim([ymax, ymin])
            the_axes.set_xlim([xmin, xmax])

            the_axes.plot([xmin + 100, xmin + 500 + 100], [ymax + 90, ymax + 90], marker='.', markersize=8,
                          color='black')
            the_axes.text(xmin + 10 + 180, ymax + 40 + 100, "500m", fontsize=9)

            the_axes.set_aspect('equal', adjustable='box')
            the_axes.set_ylim([ymax, ymin])
            the_axes.set_xlim([xmin, xmax])

            the_axes.set_aspect('equal', adjustable='box')

            legend_items = [
                mlines.Line2D([], [], color=Colors.gradient_red_blue_9[0], linewidth=3, markersize=12),
                mlines.Line2D([], [], color=Colors.qualitative_1_blue, dashes=(1, 1), linewidth=3, markersize=12),
                mlines.Line2D([], [], color=Colors.qualitative_1_lightblue, linewidth=3, dashes=(1, 1), markersize=12),
                mlines.Line2D([], [], color=Colors.turquoise, linewidth=3, dashes=(1, 1), markersize=12),
                mlines.Line2D([], [], color=Colors.light_gray, linewidth=3, markersize=12)
            ]

            legend_labels = [
                'Track (length: {:.0f}m, 91% rural)'.format(track_length),
                'Shortest route (length: {:.0f}m, frechet: {:.0f}m)'.format(shortest_track_length,
                                                                            shortest_track.frechet_dist),
                'Fastest route (length: {:.0f}m, frechet: {:.0f}m)'.format(fastest_track_length,
                                                                           fastest_track.frechet_dist),
                'Custom route (length: {:.0f}m, frechet: {:.0f}m)'.format(to_shape(custom_route_geom).length,
                                                                          custom_track_frechet),
                'Street network'
            ]

            the_axes.legend(
                handles=legend_items,
                labels=legend_labels,
                loc='lower left',
                ncol=1,
                bbox_to_anchor=(0.0, -0.35),
                fontsize=11,
                labelspacing=0.8,
                frameon=False
            )

    plt.savefig("track_p2p_shortest_fastest.png", bbox_inches='tight', pad_inches=0, dpi=400)


if __name__ == '__main__':
    plot('640782635244bc763c99ef5f')
